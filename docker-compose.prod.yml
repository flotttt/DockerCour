# ===== DOCKER COMPOSE PRODUCTION - OVERRIDE =====
# Configuration optimisée pour la production
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # ===== FRONTEND - OPTIMISÉ PRODUCTION =====
  frontend:
    build:
      target: production  # Build multi-stage
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - API_URL=/api  # Via Nginx
    # Pas de volumes en production (image statique)
    volumes: []
    # Pas de port exposé (via Nginx uniquement)
    ports: []
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===== BACKEND - OPTIMISÉ PRODUCTION =====
  backend:
    build:
      dockerfile: Dockerfile  # Dockerfile de production
      target: production
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DEBUG=false
    # Pas de volumes de code en production
    volumes: []
    # Pas de port exposé directement
    ports: []
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # ===== POSTGRES - SÉCURISÉ PRODUCTION =====
  postgres:
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}  # Depuis .env sécurisé
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    # Port non exposé en production
    ports: []
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    # Configuration de sauvegarde
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./backups/postgres:/backups

  # ===== MONGODB - SÉCURISÉ PRODUCTION =====
  mongodb:
    environment:
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
    # Port non exposé en production
    ports: []
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    volumes:
      - mongodb_prod_data:/data/db
      - ./docker/mongodb/init:/docker-entrypoint-initdb.d:ro
      - ./backups/mongodb:/backups

  # ===== NGINX - CONFIGURATION PRODUCTION =====
  nginx:
    ports:
      - "80:80"
      - "443:443"  # HTTPS
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # Certificats SSL (à configurer)
      # - ./ssl:/etc/nginx/ssl:ro
      - nginx_prod_logs:/var/log/nginx
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== MONITORING (optionnel) =====
  # monitoring:
  #   image: prom/node-exporter:latest
  #   container_name: biblioflow-monitoring
  #   ports:
  #     - "9100:9100"
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.rootfs=/rootfs'
  #     - '--path.sysfs=/host/sys'
  #     - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
  #   restart: unless-stopped

# ===== VOLUMES PRODUCTION =====
volumes:
  postgres_prod_data:
    driver: local
    name: biblioflow_postgres_prod_data
  mongodb_prod_data:
    driver: local
    name: biblioflow_mongodb_prod_data
  nginx_prod_logs:
    driver: local
    name: biblioflow_nginx_prod_logs